@page "/"
@inject BlogService BlogService
@inject NavigationManager Navigation

<PageTitle>Home - Blog</PageTitle>

<div class="home-page">
    <section class="hero">
        <div class="hero-content">
            <h1 class="hero-title">Welcome to My Blog</h1>
            <p class="hero-subtitle">Thoughts, stories, and ideas on technology, design, and life.</p>
        </div>
    </section>

    <section class="posts-section">
        <div class="section-header">
            <h2 class="section-title">Latest Posts</h2>
            @if (_allTags.Any())
            {
                <div class="tag-filter">
                    <button class="tag-btn @(_selectedTag == null ? "active" : "")" 
                            @onclick="() => FilterByTag(null)">
                        All
                    </button>
                    @foreach (var tag in _allTags.Take(5))
                    {
                        <button class="tag-btn @(_selectedTag == tag ? "active" : "")" 
                                @onclick="() => FilterByTag(tag)">
                            @tag
                        </button>
                    }
                </div>
            }
        </div>

        @if (_isLoading)
        {
            <div class="loading">
                <div class="loading-spinner"></div>
                <p>Loading posts...</p>
            </div>
        }
        else if (_filteredPosts.Any())
        {
            <div class="posts-grid">
                @foreach (var post in _filteredPosts)
                {
                    <article class="post-card" @onclick="() => NavigateToPost(post.Slug)">
                        <div class="post-card-content">
                            <div class="post-meta">
                                <time class="post-date">@post.PublishDate.ToString("MMM dd, yyyy")</time>
                                <span class="post-read-time">@(post.Metadata?.ReadTimeMinutes ?? 5) min read</span>
                            </div>
                            
                            <h3 class="post-title">@post.Title</h3>
                            
                            @if (!string.IsNullOrEmpty(post.Summary))
                            {
                                <p class="post-summary">@post.Summary</p>
                            }
                            
                            <div class="post-footer">
                                @if (post.Tags.Any())
                                {
                                    <div class="post-tags">
                                        @foreach (var tag in post.Tags.Take(3))
                                        {
                                            <span class="post-tag">@tag</span>
                                        }
                                    </div>
                                }
                                <div class="post-author">By @post.Author</div>
                            </div>
                        </div>
                    </article>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <h3>No posts found</h3>
                <p>@(_selectedTag != null ? $"No posts found with tag '{_selectedTag}'" : "No blog posts available yet.")</p>
                @if (_selectedTag != null)
                {
                    <button class="btn-secondary" @onclick="() => FilterByTag(null)">
                        Show all posts
                    </button>
                }
            </div>
        }
    </section>
</div>

<style>
    .home-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .hero {
        text-align: center;
        padding: 4rem 0;
        margin-bottom: 4rem;
        background: linear-gradient(135deg, var(--primary-bg), var(--accent-bg));
        border-radius: 1rem;
        position: relative;
        overflow: hidden;
    }

    .hero::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, rgba(255,255,255,0.1), transparent);
        pointer-events: none;
    }

    .hero-content {
        position: relative;
        z-index: 1;
    }

    .hero-title {
        font-size: 3rem;
        font-weight: 800;
        margin: 0 0 1rem 0;
        background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        line-height: 1.2;
    }

    .hero-subtitle {
        font-size: 1.25rem;
        color: var(--text-color-secondary);
        margin: 0;
        max-width: 600px;
        margin: 0 auto;
        line-height: 1.6;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .section-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        color: var(--text-color);
    }

    .tag-filter {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .tag-btn {
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        background: var(--surface-bg);
        color: var(--text-color-secondary);
        border-radius: 2rem;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .tag-btn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        transform: translateY(-1px);
    }

    .tag-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .loading {
        text-align: center;
        padding: 4rem 0;
    }

    .loading-spinner {
        width: 3rem;
        height: 3rem;
        border: 3px solid var(--border-color);
        border-top: 3px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem auto;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .posts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
    }

    .post-card {
        background: var(--surface-bg);
        border: 1px solid var(--border-color);
        border-radius: 1rem;
        padding: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .post-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
        transform: scaleX(0);
        transition: transform 0.3s ease;
    }

    .post-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        border-color: var(--primary-color);
    }

    .post-card:hover::before {
        transform: scaleX(1);
    }

    .post-card-content {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .post-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 0.85rem;
        color: var(--text-color-secondary);
    }

    .post-date {
        font-weight: 500;
    }

    .post-read-time {
        background: var(--primary-bg);
        color: var(--primary-color);
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-weight: 500;
    }

    .post-title {
        font-size: 1.3rem;
        font-weight: 700;
        margin: 0 0 1rem 0;
        color: var(--text-color);
        line-height: 1.4;
    }

    .post-summary {
        color: var(--text-color-secondary);
        line-height: 1.6;
        margin: 0 0 1.5rem 0;
        flex-grow: 1;
    }

    .post-footer {
        display: flex;
        justify-content: space-between;
        align-items: end;
        gap: 1rem;
        margin-top: auto;
    }

    .post-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
    }

    .post-tag {
        background: var(--accent-bg);
        color: var(--accent-color);
        padding: 0.2rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .post-author {
        font-size: 0.85rem;
        color: var(--text-color-secondary);
        font-weight: 500;
        white-space: nowrap;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 0;
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-state h3 {
        font-size: 1.5rem;
        margin: 0 0 0.5rem 0;
        color: var(--text-color);
    }

    .empty-state p {
        color: var(--text-color-secondary);
        margin: 0 0 2rem 0;
    }

    .btn-secondary {
        padding: 0.75rem 1.5rem;
        background: var(--surface-bg);
        border: 1px solid var(--border-color);
        color: var(--text-color);
        border-radius: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
        font-weight: 500;
    }

    .btn-secondary:hover {
        background: var(--hover-bg);
        border-color: var(--primary-color);
    }

    @@media (max-width: 768px) {
        .hero-title {
            font-size: 2rem;
        }

        .hero-subtitle {
            font-size: 1rem;
        }

        .posts-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .section-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .tag-filter {
            width: 100%;
            overflow-x: auto;
            padding-bottom: 0.5rem;
        }
    }
</style>

@code {
    private List<BlogPost> _posts = new();
    private List<BlogPost> _filteredPosts = new();
    private List<string> _allTags = new();
    private string? _selectedTag;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _posts = await BlogService.GetAllPostsAsync();
            _allTags = await BlogService.GetAllTagsAsync();
            _filteredPosts = _posts;
        }
        catch (Exception)
        {
            // Handle loading errors gracefully
            _posts = new List<BlogPost>();
            _allTags = new List<string>();
            _filteredPosts = new List<BlogPost>();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterByTag(string? tag)
    {
        _selectedTag = tag;
        _filteredPosts = tag == null 
            ? _posts 
            : _posts.Where(p => p.Tags.Contains(tag, StringComparer.OrdinalIgnoreCase)).ToList();
        StateHasChanged();
    }

    private void NavigateToPost(string slug)
    {
        Navigation.NavigateTo($"/post/{slug}");
    }
}
